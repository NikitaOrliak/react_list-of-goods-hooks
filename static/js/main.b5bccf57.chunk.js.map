{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","ReverseType","goodsFromServer","resetField","field","App","useState","sortField","setSortField","reverseField","setReverseField","visibleGoods","goods","preparedGoods","sort","good1","good2","alphabet","localeCompare","length","reverse","getPreparedGoods","className","type","cn","onClick","empty","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAuBKA,EAMAC,E,0EAxBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA8CF,SAASC,EAAWC,GAClBA,EAAM,K,SAvCHJ,K,oBAAAA,E,gBAAAA,E,UAAAA,M,cAMAC,K,kBAAAA,E,UAAAA,M,KAoCE,IAAMI,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAEMC,EAnCR,SACEC,EADF,GAEa,IADQL,EACT,EADSA,UAAWE,EACpB,EADoBA,aAE1BI,EAAa,YAAOD,GAqBxB,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKP,EAASiB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKhB,EAASmB,OACZ,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKXV,IACFI,EAAgBA,EAAcO,WAGzBP,EAWcQ,CACnBnB,EACA,CAAEK,YAAWE,iBAGf,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYjB,IAAcP,EAASiB,WAErCQ,QAAS,kBAAMjB,EAAaR,EAASiB,WALvC,iCAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYjB,IAAcP,EAASmB,SAErCM,QAAS,kBAAMjB,EAAaR,EAASmB,SALvC,4BAUA,wBACEI,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYf,IAAiBR,EAAYmB,UAE3CK,QAAS,kBAAMf,EACbD,IAAiBR,EAAYmB,QACzBnB,EAAYyB,MACZzB,EAAYmB,UARpB,sBAeGb,GAAaE,IACZ,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPtB,EAAWK,GACXL,EAAWO,IALf,sBAeN,6BAEIC,EAAagB,KAAI,SAAAC,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YClInBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b5bccf57.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport React, { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface Params {\n  sortField: SortType[keyof SortType],\n  reverseField: ReverseType[keyof ReverseType],\n}\n\nenum SortType {\n  alphabet = 'alphabet',\n  length = 'length',\n  empty = '',\n}\n\nenum ReverseType {\n  reverse = 'reverse',\n  empty = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[], { sortField, reverseField }: Params,\n): string[] {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.alphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nfunction resetField(field: (param: string) => void) {\n  field('');\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setReverseField] = useState('');\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, reverseField },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortType.alphabet,\n          })}\n          onClick={() => setSortField(SortType.alphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortType.length,\n          })}\n          onClick={() => setSortField(SortType.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': reverseField !== ReverseType.reverse,\n          })}\n          onClick={() => setReverseField(\n            reverseField === ReverseType.reverse\n              ? ReverseType.empty\n              : ReverseType.reverse,\n          )}\n        >\n          Reverse\n        </button>\n\n        {\n          (sortField || reverseField) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => {\n                resetField(setSortField);\n                resetField(setReverseField);\n              }}\n            >\n              Reset\n            </button>\n          )\n        }\n\n      </div>\n\n      <ul>\n        {\n          visibleGoods.map(good => (\n            <li\n              data-cy=\"Good\"\n              key={good}\n            >\n              {good}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}